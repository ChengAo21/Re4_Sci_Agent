
****************************************
```python
import numpy as np
import matplotlib.pyplot as plt

# Technical explanation:
# This code implements a first-order Godunov-type Finite Volume Method (FVM) to solve the 1D Euler equations
# for the Sod shock tube problem. The numerical flux at cell interfaces is computed using the HLL approximate
# Riemann solver, which is robust and stable for capturing shocks and contact discontinuities.
# The conserved variables are updated explicitly in time using the forward Euler method.
# The CFL condition controls the time step to ensure stability.
# The solution is plotted at t=0.2 showing density, velocity, and pressure.

# Constants
gamma = 1.4  # Ratio of specific heats

# Conversion from conserved variables U = [rho, rho*u, rho*E] to primitive variables W = [rho, u, p]
def U_to_W(U):
    rho = U[0]
    u = U[1] / rho
    E = U[2] / rho
    p = (gamma - 1.0) * rho * (E - 0.5 * u**2)
    return np.array([rho, u, p])

# Conversion from primitive variables W = [rho, u, p] to conserved variables U = [rho, rho*u, rho*E]
def W_to_U(W):
    rho, u, p = W
    E = 0.5 * u**2 + p / ((gamma - 1.0) * rho)
    return np.array([rho, rho * u, rho * E])

# Flux function F(U) = [rho*u, rho*u^2 + p, (rho*E + p)*u]
def flux(U):
    W = U_to_W(U)
    rho, u, p = W
    F = np.array([
        rho * u,
        rho * u**2 + p,
        (U[2] + p) * u
    ])
    return F

# HLL approximate Riemann solver flux at interface between states U_L and U_R
def HLL_flux(U_L, U_R):
    W_L = U_to_W(U_L)
    W_R = U_to_W(U_R)

    rho_L, u_L, p_L = W_L
    rho_R, u_R, p_R = W_R

    c_L = np.sqrt(gamma * p_L / rho_L)
    c_R = np.sqrt(gamma * p_R / rho_R)

    # Estimate wave speeds s_L and s_R
    s_L = min(u_L - c_L, u_R - c_R, 0.0)
    s_R = max(u_L + c_L, u_R + c_R, 0.0)

    F_L = flux(U_L)
    F_R = flux(U_R)

    if s_L >= 0:
        return F_L
    elif s_R <= 0:
        return F_R
    else:
        return (s_R * F_L - s_L * F_R + s_L * s_R * (U_R - U_L)) / (s_R - s_L)

# Initialize grid and initial conditions for Sod shock tube
def initialize(N):
    x_start, x_end = 0.0, 1.0
    dx = (x_end - x_start) / N
    x = (np.arange(N) + 0.5) * dx  # cell centers

    U = np.zeros((3, N))  # conserved variables array

    # Set initial primitive variables according to Sod problem
    for i in range(N):
        if x[i] <= 0.5:
            rho, u, p = 1.0, 0.0, 1.0
        else:
            rho, u, p = 0.125, 0.0, 0.1
        U[:, i] = W_to_U(np.array([rho, u, p]))
    return x, dx, U

# Apply zero-gradient (outflow) boundary conditions by ghost cells
def apply_boundary(U):
    # U shape: (3, N)
    U_ext = np.zeros((3, U.shape[1] + 2))
    U_ext[:, 1:-1] = U[:, :]
    U_ext[:, 0] = U[:, 0]      # left ghost cell = first cell
    U_ext[:, -1] = U[:, -1]    # right ghost cell = last cell
    return U_ext

# Compute maximum wave speed for CFL condition
def max_wave_speed(U):
    W = np.array([U_to_W(U[:, i]) for i in range(U.shape[1])])
    rho = W[:, 0]
    u = W[:, 1]
    p = W[:, 2]
    c = np.sqrt(gamma * p / rho)
    return np.max(np.abs(u) + c)

# Main solver function
def solve_euler(N=200, t_final=0.2, CFL=0.9):
    x, dx, U = initialize(N)
    t = 0.0

    while t < t_final:
        U_ext = apply_boundary(U)
        max_speed = max_wave_speed(U)
        dt = CFL * dx / max_speed
        if t + dt > t_final:
            dt = t_final - t

        # Compute numerical fluxes at interfaces
        fluxes = np.zeros((3, N + 1))
        for i in range(N + 1):
            U_L = U_ext[:, i]
            U_R = U_ext[:, i + 1]
            fluxes[:, i] = HLL_flux(U_L, U_R)

        # Update conserved variables using finite volume update
        U = U - (dt / dx) * (fluxes[:, 1:] - fluxes[:, :-1])

        t += dt

    # Convert final conserved variables to primitive variables for plotting
    W = np.array([U_to_W(U[:, i]) for i in range(N)])
    rho = W[:, 0]
    u = W[:, 1]
    p = W[:, 2]

    return x, rho, u, p

# Run solver and plot results
x, rho, u, p = solve_euler()

plt.figure(figsize=(10, 6))
plt.plot(x, rho, label='Density $\u03C1$', color='blue')
plt.plot(x, u, label='Velocity $u$', color='red')
plt.plot(x, p, label='Pressure $p$', color='green')
plt.xlabel('x')
plt.title('Sod Shock Tube Solution at t=0.2 (First-order Godunov with HLL)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
```

****************************************
