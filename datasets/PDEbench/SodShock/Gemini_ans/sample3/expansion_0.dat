
****************************************
### Expanded Context of the Problem

The Euler equations represent a fundamental system of hyperbolic partial differential equations (PDEs) governing the inviscid flow of compressible fluids. They describe the conservation of mass, momentum, and energy in a one-dimensional domain. These equations are widely used in computational fluid dynamics (CFD) to model shock waves, expansion fans, and contact discontinuities in gases, especially in aerospace engineering, astrophysics, and high-speed aerodynamics.

The system is given by:

\[
\begin{cases}
\frac{\partial \rho}{\partial t} + \frac{\partial (\rho u)}{\partial x} = 0, \\
\frac{\partial (\rho u)}{\partial t} + \frac{\partial (\rho u^2 + p)}{\partial x} = 0, \\
\frac{\partial (\rho E)}{\partial t} + \frac{\partial (\rho E u + p u)}{\partial x} = 0,
\end{cases}
\]

where:
- \(\rho\) is the fluid density,
- \(u\) is the velocity,
- \(p\) is the pressure,
- \(E = \frac{1}{2} u^2 + \frac{p}{(\gamma - 1)\rho}\) is the total specific energy,
- \(\gamma = 1.4\) is the ratio of specific heats for air (ideal diatomic gas).

The problem is posed on the spatial domain \(x \in [0,1]\) with initial conditions representing a classic Riemann problem (shock tube problem):

\[
(\rho, u, p) = 
\begin{cases}
(1.0, 0.0, 1.0), & 0 < x \leq 0.5, \\
(0.125, 0.0, 0.1), & 0.5 \leq x < 1,
\end{cases}
\]

which models a discontinuity in the initial state that evolves into shock waves, rarefaction waves, and contact discontinuities over time.

The goal is to implement a numerical solver from scratch that can accurately and efficiently resolve these nonlinear wave interactions and capture sharp discontinuities without introducing non-physical oscillations or excessive numerical diffusion. The solution should be computed up to \(t=0.2\) and visualized by plotting the density \(\rho\), velocity \(u\), and pressure \(p\).

---

### Detailed Solution Plans

#### Plan 1: Finite Volume Method with Godunov's Scheme and Exact Riemann Solver

**Overview:**
- Use a finite volume discretization to ensure conservation.
- At each cell interface, solve the Riemann problem exactly to compute numerical fluxes.
- Update the conserved variables using these fluxes.
- Use a suitable CFL condition for time stepping.

**Steps:**
1. **Discretization:**
   - Divide the domain into \(N\) cells.
   - Store cell-averaged conserved variables \(\mathbf{U} = [\rho, \rho u, \rho E]^T\).

2. **Initial Conditions:**
   - Initialize \(\rho, u, p\) according to the Riemann problem.
   - Compute \(\rho E\) from \(u, p, \rho\).

3. **Riemann Solver:**
   - Implement the exact Riemann solver for the Euler equations (e.g., Toro's method).
   - For each interface, solve the Riemann problem between left and right states to get flux \(\mathbf{F}\).

4. **Time Integration:**
   - Use explicit Euler or a higher-order Runge-Kutta method.
   - Compute time step \(\Delta t\) from CFL condition:
     \[
     \Delta t = \text{CFL} \times \frac{\Delta x}{\max(|u| + c)},
     \]
     where \(c = \sqrt{\gamma p / \rho}\) is the speed of sound.

5. **Update:**
   - Update conserved variables using:
     \[
     \mathbf{U}_i^{n+1} = \mathbf{U}_i^n - \frac{\Delta t}{\Delta x} \left( \mathbf{F}_{i+1/2} - \mathbf{F}_{i-1/2} \right).
     \]

6. **Postprocessing:**
   - Convert conserved variables back to primitive variables.
   - Plot \(\rho, u, p\) at \(t=0.2\).

**Pros:**
- Very accurate and physically consistent.
- Captures shocks and contact discontinuities sharply.

**Cons:**
- Exact Riemann solver is computationally expensive.
- Complex implementation.

---

#### Plan 2: Finite Volume Method with Approximate Riemann Solver (HLLC)

**Overview:**
- Use a finite volume method with the HLLC (Harten-Lax-van Leer-Contact) approximate Riemann solver.
- HLLC balances accuracy and computational cost, capturing contact discontinuities better than simpler solvers.

**Steps:**
1. Same discretization and initialization as Plan 1.

2. **HLLC Solver:**
   - Implement the HLLC approximate Riemann solver.
   - Compute wave speeds \(S_L, S_R, S_*\) and fluxes accordingly.

3. **Time Integration and Update:**
   - Same as Plan 1.

4. **Postprocessing:**
   - Same as Plan 1.

**Pros:**
- Less computationally expensive than exact solver.
- Good shock and contact capturing.

**Cons:**
- Slightly more diffusive than exact solver.
- Still requires careful wave speed estimation.

---

#### Plan 3: Finite Volume Method with Roe's Approximate Riemann Solver and Entropy Fix

**Overview:**
- Use Roe's linearized solver to approximate fluxes.
- Apply an entropy fix to avoid non-physical expansion shocks.

**Steps:**
1. Discretize and initialize as before.

2. **Roe Solver:**
   - Compute Roe averages for states at interfaces.
   - Diagonalize flux Jacobian to get eigenvalues and eigenvectors.
   - Compute flux difference splitting.
   - Apply entropy fix (e.g., Harten-Hyman) to eigenvalues near zero.

3. **Time Integration and Update:**
   - Same as Plan 1.

4. **Postprocessing:**
   - Same as Plan 1.

**Pros:**
- Efficient and accurate for smooth and discontinuous flows.
- Linearized approach simplifies flux computation.

**Cons:**
- Roe solver can produce non-physical solutions without entropy fix.
- More complex eigenstructure calculations.

---

#### Plan 4: Finite Difference Method with High-Resolution Shock-Capturing Scheme (WENO)

**Overview:**
- Use a finite difference approach with Weighted Essentially Non-Oscillatory (WENO) reconstruction for high-order accuracy.
- Use a strong stability preserving Runge-Kutta (SSP-RK) time integrator.

**Steps:**
1. Discretize domain into grid points.

2. Initialize primitive variables and convert to conserved variables.

3. **WENO Reconstruction:**
   - Reconstruct fluxes at cell interfaces using WENO5 scheme.
   - This reduces spurious oscillations near discontinuities.

4. **Flux Splitting:**
   - Use Lax-Friedrichs or local Lax-Friedrichs flux splitting.

5. **Time Integration:**
   - Use SSP-RK3 for stability and accuracy.

6. **Update:**
   - Update conserved variables using reconstructed fluxes.

7. **Postprocessing:**
   - Convert conserved to primitive variables.
   - Plot results.

**Pros:**
- High-order accuracy in smooth regions.
- Good shock capturing without oscillations.

**Cons:**
- More complex implementation.
- Computationally more expensive.

---

#### Plan 5: Finite Volume Method with MUSCL-Hancock Scheme and Minmod Slope Limiter

**Overview:**
- Use MUSCL (Monotonic Upstream-centered Schemes for Conservation Laws) for second-order spatial accuracy.
- Use Hancock predictor-corrector step.
- Apply minmod slope limiter to prevent oscillations.

**Steps:**
1. Discretize and initialize as before.

2. **Reconstruction:**
   - Compute slopes of conserved variables using minmod limiter.
   - Reconstruct left and right states at interfaces.

3. **Predictor Step:**
   - Evolve reconstructed states half time step.

4. **Riemann Solver:**
   - Use HLL or HLLC solver for fluxes.

5. **Corrector Step:**
   - Update conserved variables with fluxes.

6. **Time Integration:**
   - Use explicit Euler or RK2.

7. **Postprocessing:**
   - Convert and plot.

**Pros:**
- Second-order accuracy.
- Simple and robust.
- Good shock resolution.

**Cons:**
- Less accurate than WENO.
- Some numerical diffusion.

---

### Summary Table of Solution Plans

| Plan | Methodology                          | Riemann Solver       | Accuracy       | Complexity | Pros                          | Cons                          |
|-------|------------------------------------|----------------------|----------------|------------|-------------------------------|-------------------------------|
| 1     | Finite Volume + Exact Riemann      | Exact                | High           | High       | Very accurate, sharp shocks    | Computationally expensive     |
| 2     | Finite Volume + HLLC               | HLLC Approximate     | High           | Medium     | Good balance accuracy/cost     | Slightly diffusive             |
| 3     | Finite Volume + Roe + Entropy Fix  | Roe Approximate      | Medium-High    | Medium     | Efficient, accurate            | Needs entropy fix              |
| 4     | Finite Difference + WENO + SSP-RK  | Flux Splitting       | Very High      | High       | High-order, non-oscillatory    | Complex, expensive             |
| 5     | Finite Volume + MUSCL + Minmod     | HLL or HLLC          | Second-order   | Low-Medium | Simple, robust                 | More diffusive than WENO       |

---

Each plan can be implemented using only numpy, scipy, matplotlib, and pytorch (if desired for tensor operations or GPU acceleration). The choice depends on the trade-off between accuracy, complexity, and computational resources.
****************************************
